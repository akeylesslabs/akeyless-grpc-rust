// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringArray {
    #[prost(string, repeated, tag="1")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapInt64 {
    #[prost(message, optional, boxed, tag="1")]
    pub map: ::core::option::Option<::prost::alloc::boxed::Box<MapInt64>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessOrGroupPermissionAssignment {
    #[prost(string, tag="504426029")]
    pub access_id: ::prost::alloc::string::String,
    #[prost(string, tag="495496908")]
    pub access_type: ::prost::alloc::string::String,
    #[prost(string, tag="307750079")]
    pub assignment_name: ::prost::alloc::string::String,
    #[prost(string, tag="307951982")]
    pub assignment_type: ::prost::alloc::string::String,
    #[prost(string, tag="506361563")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(map="string, message", tag="185133421")]
    pub sub_claims: ::std::collections::HashMap<::prost::alloc::string::String, StringArray>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttributeTypeAndValue {
    #[prost(int64, repeated, tag="2622298")]
    pub r#type: ::prost::alloc::vec::Vec<i64>,
    #[prost(message, optional, tag="82420049")]
    pub value: ::core::option::Option<::prost_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Auth {
    /// Access ID
    #[prost(string, tag="504474079")]
    pub access_id: ::prost::alloc::string::String,
    /// Access key (relevant only for access-type=access_key)
    #[prost(string, tag="69437836")]
    pub access_key: ::prost::alloc::string::String,
    /// Access Type (access_key/password/saml/ldap/k8s/azure_ad/oidc/aws_iam/universal_identity/jwt/gcp/cert)
    #[prost(string, tag="4802047")]
    pub access_type: ::prost::alloc::string::String,
    /// Account id (relevant only for access-type=password where the email address is associated with more than one account)
    #[prost(string, tag="266510150")]
    pub account_id: ::prost::alloc::string::String,
    /// Email (relevant only for access-type=password)
    #[prost(string, tag="514823268")]
    pub admin_email: ::prost::alloc::string::String,
    /// Password (relevant only for access-type=password)
    #[prost(string, tag="147358556")]
    pub admin_password: ::prost::alloc::string::String,
    /// Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type=cert)
    #[prost(string, tag="378585679")]
    pub cert_data: ::prost::alloc::string::String,
    /// The cloud identity (relevant only for access-type=azure_ad,aws_iam,gcp)
    #[prost(string, tag="20852661")]
    pub cloud_id: ::prost::alloc::string::String,
    #[prost(bool, tag="95458899")]
    pub debug: bool,
    /// Gateway URL for the K8S/OAUTH2 authenticated (relevant only for access-type=k8s/oauth2)
    #[prost(string, tag="436486554")]
    pub gateway_url: ::prost::alloc::string::String,
    /// GCP JWT audience
    #[prost(string, tag="147155812")]
    pub gcp_audience: ::prost::alloc::string::String,
    /// Set output format to JSON
    #[prost(bool, tag="3271912")]
    pub json: bool,
    /// The Json Web Token (relevant only for access-type=jwt/oidc)
    #[prost(string, tag="105671")]
    pub jwt: ::prost::alloc::string::String,
    /// The K8S Auth config name (relevant only for access-type=k8s)
    #[prost(string, tag="152509339")]
    pub k8s_auth_config_name: ::prost::alloc::string::String,
    /// The K8S service account token. (relevant only for access-type=k8s)
    #[prost(string, tag="84004969")]
    pub k8s_service_account_token: ::prost::alloc::string::String,
    /// Private key data encoded in base64. Used if file was not provided.(relevant only for access-type=cert)
    #[prost(string, tag="454465112")]
    pub key_data: ::prost::alloc::string::String,
    /// LDAP password (relevant only for access-type=ldap)
    #[prost(string, tag="425950260")]
    pub ldap_password: ::prost::alloc::string::String,
    /// LDAP username (relevant only for access-type=ldap)
    #[prost(string, tag="519878034")]
    pub ldap_username: ::prost::alloc::string::String,
    /// The type of the OCI configuration to use \[instance/apikey/resource\] (relevant only for access-type=oci)
    #[prost(string, tag="74705531")]
    pub oci_auth_type: ::prost::alloc::string::String,
    /// A list of Oracle Cloud IDs groups (relevant only for access-type=oci)
    #[prost(string, repeated, tag="376141772")]
    pub oci_group_ocid: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The universal_identity token (relevant only for access-type=universal_identity)
    #[prost(string, tag="247175864")]
    pub uid_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemAccessCredentialsReplyObj {
    /// Temporary credentials for accessing Auth
    #[prost(string, tag="361770101")]
    pub auth_creds: ::prost::alloc::string::String,
    /// Credentials expiration date
    #[prost(int64, tag="215417551")]
    pub expiry: i64,
    /// Temporary credentials for accessing the KFMs instances
    #[prost(string, tag="367110955")]
    pub kfm_creds: ::prost::alloc::string::String,
    #[prost(string, tag="17753787")]
    pub required_mfa: ::prost::alloc::string::String,
    /// Credentials tmp token
    #[prost(string, tag="110541305")]
    pub token: ::prost::alloc::string::String,
    /// Temporary credentials for accessing the UAM service
    #[prost(string, tag="224709257")]
    pub uam_creds: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthOutput {
    #[prost(message, optional, tag="94925029")]
    pub creds: ::core::option::Option<SystemAccessCredentialsReplyObj>,
    #[prost(string, tag="110541305")]
    pub token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BastionListEntry {
    #[prost(string, tag="504426029")]
    pub access_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="123902894")]
    pub allowed_access_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="334862053")]
    pub allowed_urls: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map="string, message", tag="334566886")]
    pub allowed_urls_per_instance: ::std::collections::HashMap<::prost::alloc::string::String, StringArray>,
    #[prost(string, tag="481210961")]
    pub cluster_name: ::prost::alloc::string::String,
    #[prost(string, tag="4473835")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag="382847744")]
    pub last_report: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BastionsList {
    #[prost(message, repeated, tag="191311291")]
    pub clusters: ::prost::alloc::vec::Vec<BastionListEntry>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CertificateExpirationEvent {
    #[prost(int64, tag="200608449")]
    pub seconds_before: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Extension {
    #[prost(bool, tag="406182850")]
    pub critical: bool,
    #[prost(string, tag="2420395")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="82420049")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Name {
    #[prost(string, repeated, tag="61870221")]
    pub country: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// ExtraNames contains attributes to be copied, raw, into any marshaled distinguished names. Values override any attributes with the same OID. The ExtraNames field is not populated when parsing, see Names.
    #[prost(message, repeated, tag="496158410")]
    pub extra_names: ::prost::alloc::vec::Vec<AttributeTypeAndValue>,
    #[prost(string, repeated, tag="354836870")]
    pub locality: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Names contains all parsed attributes. When parsing distinguished names, this can be used to extract non-standard attributes that are not parsed by this package. When marshaling to RDNSequences, the Names field is ignored, see ExtraNames.
    #[prost(message, repeated, tag="75032360")]
    pub names: ::prost::alloc::vec::Vec<AttributeTypeAndValue>,
    #[prost(string, tag="248107645")]
    pub serial_number: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="262380114")]
    pub street_address: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CertificateInfo {
    #[prost(int64, repeated, tag="197199965")]
    pub ext_key_usage: ::prost::alloc::vec::Vec<i64>,
    /// KeyUsage represents the set of actions that are valid for a given key. It's a bitmap of the KeyUsage* constants.
    #[prost(int64, tag="19625635")]
    pub key_usage: i64,
    #[prost(string, repeated, tag="30610022")]
    pub crl_distribution_points: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="113148750")]
    pub dns_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="228659522")]
    pub email_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="198808559")]
    pub extensions: ::prost::alloc::vec::Vec<Extension>,
    #[prost(string, repeated, tag="122453643")]
    pub ip_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="100490131")]
    pub is_ca: bool,
    #[prost(message, optional, tag="105418057")]
    pub issuer: ::core::option::Option<Name>,
    #[prost(string, repeated, tag="108425183")]
    pub issuing_certificate_url: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag="501095905")]
    pub key_size: i64,
    #[prost(string, tag="26995")]
    pub not_after: ::prost::alloc::string::String,
    #[prost(string, tag="508735895")]
    pub not_before: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="532419570")]
    pub ocsp_server: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="270494767")]
    pub public_key_algorithm_name: ::prost::alloc::string::String,
    #[prost(string, tag="312410100")]
    pub serial_number: ::prost::alloc::string::String,
    #[prost(string, tag="318802045")]
    pub sha_1_fingerprint: ::prost::alloc::string::String,
    #[prost(string, tag="325165213")]
    pub sha_256_fingerprint: ::prost::alloc::string::String,
    #[prost(string, tag="536713401")]
    pub signature: ::prost::alloc::string::String,
    #[prost(string, tag="14992702")]
    pub signature_algorithm_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag="257272535")]
    pub subject: ::core::option::Option<Name>,
    #[prost(string, tag="32403582")]
    pub subject_public_key: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="3598471")]
    pub uris: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag="351608024")]
    pub version: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CertificateChainInfo {
    #[prost(message, repeated, tag="508056040")]
    pub certificate_chain: ::prost::alloc::vec::Vec<CertificateInfo>,
    #[prost(string, tag="449252258")]
    pub certificate_format: ::prost::alloc::string::String,
    #[prost(bool, tag="326181675")]
    pub certificate_has_private_key: bool,
    #[prost(string, tag="16856697")]
    pub certificate_issuer_gw_cluster_url: ::prost::alloc::string::String,
    #[prost(int64, tag="321325594")]
    pub certificate_issuer_item_id: i64,
    #[prost(string, tag="385450410")]
    pub certificate_issuer_name: ::prost::alloc::string::String,
    #[prost(string, tag="380404113")]
    pub certificate_pem: ::prost::alloc::string::String,
    #[prost(string, tag="248192105")]
    pub certificate_status: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="290914138")]
    pub expiration_events: ::prost::alloc::vec::Vec<CertificateExpirationEvent>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkiCertificateIssueDetails {
    #[prost(bool, tag="518243023")]
    pub allow_any_name: bool,
    #[prost(bool, tag="26391201")]
    pub allow_copy_ext_from_csr: bool,
    #[prost(bool, tag="72910686")]
    pub allow_subdomains: bool,
    #[prost(string, repeated, tag="482100199")]
    pub allowed_domains_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map="string, message", tag="196286118")]
    pub allowed_extra_extensions: ::std::collections::HashMap<::prost::alloc::string::String, StringArray>,
    #[prost(string, repeated, tag="98057158")]
    pub allowed_uri_sans: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="223768384")]
    pub basic_constraints_valid_for_non_ca: bool,
    #[prost(string, tag="87562043")]
    pub certificate_authority_mode: ::prost::alloc::string::String,
    #[prost(bool, tag="174101664")]
    pub client_flag: bool,
    #[prost(bool, tag="164303738")]
    pub code_signing_flag: bool,
    #[prost(string, repeated, tag="420960151")]
    pub country: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="43662756")]
    pub create_private_crl: bool,
    #[prost(bool, tag="471631405")]
    pub create_public_crl: bool,
    /// DestinationPath is the destination to save generated certificates
    #[prost(string, tag="131543480")]
    pub destination_path: ::prost::alloc::string::String,
    #[prost(bool, tag="405130621")]
    pub enforce_hostnames: bool,
    /// ExpirationNotification holds a list of expiration notices that should be sent in case a certificate is about to expire, this value is being propagated to the Certificate resources that are created
    #[prost(message, repeated, tag="290914138")]
    pub expiration_events: ::prost::alloc::vec::Vec<CertificateExpirationEvent>,
    #[prost(int64, tag="109299666")]
    pub gw_cluster_id: i64,
    /// GWClusterURL is required when CAMode is \"public\" and it defines the cluster URL the PKI should be issued from. The GW cluster must have permissions to read associated target's details
    #[prost(string, tag="369818845")]
    pub gw_cluster_url: ::prost::alloc::string::String,
    #[prost(bool, tag="100490131")]
    pub is_ca: bool,
    #[prost(int64, tag="500589286")]
    pub key_bits: i64,
    #[prost(string, tag="501140762")]
    pub key_type: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="62677412")]
    pub key_usage_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="290192742")]
    pub locality: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
    #[prost(int64, tag="87672600")]
    pub not_before_duration: i64,
    #[prost(string, repeated, tag="314850263")]
    pub organization_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="258418286")]
    pub organization_unit_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="442650402")]
    pub postal_code: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// ProtectGeneratedCertificates dictates whether the created certificates should be protected from deletion
    #[prost(bool, tag="45535708")]
    pub protect_generated_certificates: bool,
    #[prost(string, repeated, tag="450614481")]
    pub province: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="150256005")]
    pub require_cn: bool,
    #[prost(bool, tag="222127385")]
    pub server_flag: bool,
    #[prost(string, repeated, tag="310779979")]
    pub street_address: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SshCertificateIssueDetails {
    /// Relevant for host certificate
    #[prost(string, repeated, tag="417577833")]
    pub allowed_domains: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="216821683")]
    pub allowed_user_key_lengths: ::core::option::Option<MapInt64>,
    /// Relevant for user certificate
    #[prost(string, repeated, tag="180153170")]
    pub allowed_users: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag="331910029")]
    pub cert_type: i32,
    #[prost(map="string, string", tag="294360574")]
    pub critical_options: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(map="string, string", tag="198808559")]
    pub extensions: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(string, repeated, tag="338717179")]
    pub principals: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// In case it is empty, the key ID will be combination of user identifiers and a random string
    #[prost(string, tag="389937644")]
    pub static_key_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CertificateIssueInfo {
    #[prost(string, tag="62229661")]
    pub cert_issuer_type: ::prost::alloc::string::String,
    #[prost(int64, tag="307578002")]
    pub max_ttl: i64,
    #[prost(message, optional, tag="83794362")]
    pub pki_cert_issuer_details: ::core::option::Option<PkiCertificateIssueDetails>,
    #[prost(message, optional, tag="19599744")]
    pub ssh_cert_issuer_details: ::core::option::Option<SshCertificateIssueDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CertificateTemplateInfo {
    #[prost(string, tag="314342308")]
    pub common_name: ::prost::alloc::string::String,
    #[prost(string, tag="420960151")]
    pub country: ::prost::alloc::string::String,
    #[prost(string, tag="532754765")]
    pub csr_cnf_base_64: ::prost::alloc::string::String,
    #[prost(string, tag="308555797")]
    pub digest_algo: ::prost::alloc::string::String,
    #[prost(string, tag="290192742")]
    pub locality: ::prost::alloc::string::String,
    #[prost(string, tag="105180469")]
    pub organization: ::prost::alloc::string::String,
    #[prost(string, tag="450614481")]
    pub province: ::prost::alloc::string::String,
    #[prost(bool, tag="113140337")]
    pub self_signed_enabled: bool,
    #[prost(int64, tag="115180")]
    pub ttl: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CertificateVersionInfo {
    #[prost(string, tag="26995")]
    pub not_after: ::prost::alloc::string::String,
    #[prost(string, tag="508735895")]
    pub not_before: ::prost::alloc::string::String,
    #[prost(string, tag="355610639")]
    pub status: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClassicKeyStatusInfo {
    #[prost(string, tag="25090952")]
    pub error_date: ::prost::alloc::string::String,
    #[prost(string, tag="414908644")]
    pub last_error: ::prost::alloc::string::String,
    /// ClassicKeyTargetStatus defines status of classic key target
    #[prost(string, tag="424887742")]
    pub last_status: ::prost::alloc::string::String,
    #[prost(int64, tag="351608024")]
    pub version: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExternalKmsKeyId {
    #[prost(string, tag="60931335")]
    pub key_id: ::prost::alloc::string::String,
    #[prost(string, tag="368136856")]
    pub key_reference: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClassicKeyTargetInfo {
    #[prost(message, optional, tag="344724413")]
    pub external_kms_id: ::core::option::Option<ExternalKmsKeyId>,
    #[prost(string, repeated, tag="273969983")]
    pub key_purpose: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="526259666")]
    pub key_status: ::core::option::Option<ClassicKeyStatusInfo>,
    #[prost(string, tag="92961677")]
    pub target_assoc_id: ::prost::alloc::string::String,
    #[prost(string, tag="473945819")]
    pub target_type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClassicKeyDetailsInfo {
    #[prost(map="string, message", tag="225657212")]
    pub classic_key_attributes: ::std::collections::HashMap<::prost::alloc::string::String, StringArray>,
    #[prost(string, tag="66478265")]
    pub classic_key_id: ::prost::alloc::string::String,
    #[prost(int64, tag="109299666")]
    pub gw_cluster_id: i64,
    #[prost(bool, tag="363586705")]
    pub has_certificate: bool,
    #[prost(bool, tag="135257807")]
    pub is_provided_by_user: bool,
    #[prost(bool, tag="523412318")]
    pub is_unexportable: bool,
    /// ItemState defines the different states an Item can be in
    #[prost(string, tag="34979154")]
    pub key_state: ::prost::alloc::string::String,
    #[prost(string, tag="501140762")]
    pub key_type: ::prost::alloc::string::String,
    #[prost(string, tag="414908644")]
    pub last_error: ::prost::alloc::string::String,
    #[prost(string, tag="294200204")]
    pub public_key: ::prost::alloc::string::String,
    #[prost(string, tag="433485718")]
    pub target_alias_helper: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="196805557")]
    pub target_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="464535296")]
    pub targets: ::prost::alloc::vec::Vec<ClassicKeyTargetInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSecret {
    /// for personal password manager
    #[prost(string, tag="213139122")]
    pub accessibility: ::prost::alloc::string::String,
    /// Trigger an event when a secret value changed \[true/false\] (Relevant only for Static Secret)
    #[prost(string, tag="120187333")]
    pub change_event: ::prost::alloc::string::String,
    /// For Password Management use, additional fields
    #[prost(map="string, string", tag="176478307")]
    pub custom_field: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    /// Protection from accidental deletion of this object \[true/false\]
    #[prost(string, tag="517947888")]
    pub delete_protection: ::prost::alloc::string::String,
    /// Description of the object
    #[prost(string, tag="113933319")]
    pub description: ::prost::alloc::string::String,
    /// Secret format \[text/json\] (relevant only for type 'generic')
    #[prost(string, tag="195037195")]
    pub format: ::prost::alloc::string::String,
    /// For Password Management use, reflect the website context
    #[prost(string, repeated, tag="419541814")]
    pub inject_url: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Set output format to JSON
    #[prost(bool, tag="3271912")]
    pub json: bool,
    /// Set the maximum number of versions, limited by the account settings defaults.
    #[prost(string, tag="311546653")]
    pub max_versions: ::prost::alloc::string::String,
    /// Deprecated - use description
    #[prost(string, tag="450004177")]
    pub metadata: ::prost::alloc::string::String,
    /// The provided value is a multiline value (separated by '\\n')
    #[prost(bool, tag="204914851")]
    pub multiline_value: bool,
    /// Secret name
    #[prost(string, tag="3373707")]
    pub name: ::prost::alloc::string::String,
    /// For Password Management use, additional fields
    #[prost(string, tag="143243933")]
    pub password: ::prost::alloc::string::String,
    /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
    #[prost(string, tag="345297913")]
    pub protection_key: ::prost::alloc::string::String,
    /// Path to the SSH Certificate Issuer for your Akeyless Bastion
    #[prost(string, tag="471808848")]
    pub secure_access_bastion_issuer: ::prost::alloc::string::String,
    /// Enable/Disable secure remote access \[true/false\]
    #[prost(string, tag="19968568")]
    pub secure_access_enable: ::prost::alloc::string::String,
    /// Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
    #[prost(string, repeated, tag="362681116")]
    pub secure_access_host: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Remote Desktop Username
    #[prost(string, tag="66068397")]
    pub secure_access_rdp_user: ::prost::alloc::string::String,
    /// Static-Secret values contains SSH Credentials, either Private Key or Password \[password/private-key\]
    #[prost(string, tag="475656016")]
    pub secure_access_ssh_creds: ::prost::alloc::string::String,
    /// Override the SSH username as indicated in SSH Certificate Issuer
    #[prost(string, tag="396886118")]
    pub secure_access_ssh_user: ::prost::alloc::string::String,
    /// Destination URL to inject secrets
    #[prost(string, tag="479309214")]
    pub secure_access_url: ::prost::alloc::string::String,
    /// Secure browser via Akeyless Web Access Bastion
    #[prost(bool, tag="258508398")]
    pub secure_access_web_browsing: bool,
    /// Web-Proxy via Akeyless Web Access Bastion
    #[prost(bool, tag="496161502")]
    pub secure_access_web_proxy: bool,
    /// Add tags attached to this object
    #[prost(string, repeated, tag="3552281")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Authentication token (see `/auth` and `/configure`)
    #[prost(string, tag="110541305")]
    pub token: ::prost::alloc::string::String,
    /// The secret sub type \[generic/password\]
    #[prost(string, tag="3575610")]
    pub r#type: ::prost::alloc::string::String,
    /// The universal identity token, Required only for universal_identity authentication
    #[prost(string, tag="468850238")]
    pub uid_token: ::prost::alloc::string::String,
    /// For Password Management use
    #[prost(string, tag="265713450")]
    pub username: ::prost::alloc::string::String,
    /// The secret value (relevant only for type 'generic')
    #[prost(string, tag="111972721")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSecretOutput {
    #[prost(string, tag="3373707")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteItem {
    /// for personal password manager
    #[prost(string, tag="213139122")]
    pub accessibility: ::prost::alloc::string::String,
    /// When delete-in-days=-1, must be set
    #[prost(bool, tag="96728103")]
    pub delete_immediately: bool,
    /// The number of days to wait before deleting the item (relevant for keys only)
    #[prost(int64, tag="355008990")]
    pub delete_in_days: i64,
    /// Set output format to JSON
    #[prost(bool, tag="3271912")]
    pub json: bool,
    /// Item name
    #[prost(string, tag="3373707")]
    pub name: ::prost::alloc::string::String,
    /// Authentication token (see `/auth` and `/configure`)
    #[prost(string, tag="110541305")]
    pub token: ::prost::alloc::string::String,
    /// The universal identity token, Required only for universal_identity authentication
    #[prost(string, tag="468850238")]
    pub uid_token: ::prost::alloc::string::String,
    /// The specific version you want to delete - 0=last version, -1=entire item with all versions (default)
    #[prost(int32, tag="351608024")]
    pub version: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteItemOutput {
    #[prost(string, tag="519441025")]
    pub deletion_date: ::prost::alloc::string::String,
    #[prost(int64, tag="505592266")]
    pub item_id: i64,
    #[prost(string, tag="530731980")]
    pub item_name: ::prost::alloc::string::String,
    #[prost(int32, tag="288318543")]
    pub version_deleted: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DescribeItem {
    /// for personal password manager
    #[prost(string, tag="213139122")]
    pub accessibility: ::prost::alloc::string::String,
    /// Indicate if the item should return with ztb cluster details (url, etc)
    #[prost(bool, tag="287452515")]
    pub bastion_details: bool,
    /// The display id of the item
    #[prost(string, tag="377696763")]
    pub display_id: ::prost::alloc::string::String,
    /// Indicate if the item should return with clusters details (url, etc)
    #[prost(bool, tag="313497531")]
    pub gateway_details: bool,
    /// Item id of the item
    #[prost(int64, tag="505544216")]
    pub item_id: i64,
    /// Set output format to JSON
    #[prost(bool, tag="3271912")]
    pub json: bool,
    /// Item name
    #[prost(string, tag="3373707")]
    pub name: ::prost::alloc::string::String,
    /// Include all associated services details
    #[prost(bool, tag="457988143")]
    pub services_details: bool,
    /// Include all item versions in reply
    #[prost(bool, tag="66440341")]
    pub show_versions: bool,
    /// Authentication token (see `/auth` and `/configure`)
    #[prost(string, tag="110541305")]
    pub token: ::prost::alloc::string::String,
    /// The universal identity token, Required only for universal_identity authentication
    #[prost(string, tag="468850238")]
    pub uid_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynamicSecretProducerInfo {
    #[prost(string, tag="287723953")]
    pub failure_message: ::prost::alloc::string::String,
    #[prost(int64, tag="109299666")]
    pub gw_cluster_id: i64,
    /// Relevant only for generic k8s producer
    #[prost(string, tag="28957035")]
    pub k8s_allowed_namespaces: ::prost::alloc::string::String,
    /// Relevant only for generic k8s producer
    #[prost(bool, tag="199088220")]
    pub k8s_dynamic_mode: bool,
    #[prost(string, tag="529802705")]
    pub producer_last_keep_alive: ::prost::alloc::string::String,
    #[prost(string, tag="455229758")]
    pub producer_metadata: ::prost::alloc::string::String,
    /// RotationStatus defines types of rotation Status
    #[prost(string, tag="57062719")]
    pub producer_status: ::prost::alloc::string::String,
    #[prost(string, tag="410149833")]
    pub producer_type: ::prost::alloc::string::String,
    #[prost(string, tag="266141832")]
    pub user_ttl: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmailTokenizerInfo {
    /// What length of a random domain suffix to generate used only if FixedDomainSuffix is empty
    #[prost(int64, tag="260543321")]
    pub domain_suffix_length: i64,
    /// if FixedDomainSuffix isn't empty, it will be appended to the output
    #[prost(string, tag="529360481")]
    pub fixed_domain_suffix: ::prost::alloc::string::String,
    /// How many letters of the plaintext to keep in the output
    #[prost(int64, tag="153104904")]
    pub keep_prefix_length: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GatewayBasicInfo {
    #[prost(string, tag="339533302")]
    pub cluster_display_name: ::prost::alloc::string::String,
    #[prost(int64, tag="240280960")]
    pub cluster_id: i64,
    #[prost(string, tag="481210961")]
    pub cluster_name: ::prost::alloc::string::String,
    #[prost(string, tag="67470936")]
    pub cluster_url: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRotatedSecretValue {
    /// Get rotated secret value of specific Host (relevant only for Linked Target)
    #[prost(string, tag="3208616")]
    pub host: ::prost::alloc::string::String,
    /// Retrieve the Secret value without checking the Gateway's cache \[true/false\]. This flag is only relevant when using the RestAPI
    #[prost(string, tag="459170874")]
    pub ignore_cache: ::prost::alloc::string::String,
    /// Set output format to JSON
    #[prost(bool, tag="3271912")]
    pub json: bool,
    /// Secret name
    #[prost(string, tag="104585032")]
    pub names: ::prost::alloc::string::String,
    /// Authentication token (see `/auth` and `/configure`)
    #[prost(string, tag="110541305")]
    pub token: ::prost::alloc::string::String,
    /// The universal identity token, Required only for universal_identity authentication
    #[prost(string, tag="468850238")]
    pub uid_token: ::prost::alloc::string::String,
    /// Secret version
    #[prost(int32, tag="351608024")]
    pub version: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretValue {
    /// for personal password manager
    #[prost(string, tag="213139122")]
    pub accessibility: ::prost::alloc::string::String,
    /// Retrieve the Secret value without checking the Gateway's cache \[true/false\]. This flag is only relevant when using the RestAPI
    #[prost(string, tag="459170874")]
    pub ignore_cache: ::prost::alloc::string::String,
    /// Set output format to JSON
    #[prost(bool, tag="3271912")]
    pub json: bool,
    /// Secret name
    #[prost(string, repeated, tag="104585032")]
    pub names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Print the secret value with json-pretty-print (not relevent to SDK)
    #[prost(bool, tag="510656876")]
    pub pretty_print: bool,
    /// Authentication token (see `/auth` and `/configure`)
    #[prost(string, tag="110541305")]
    pub token: ::prost::alloc::string::String,
    /// The universal identity token, Required only for universal_identity authentication
    #[prost(string, tag="468850238")]
    pub uid_token: ::prost::alloc::string::String,
    /// Secret version, if negative value N is provided the last N versions will return (maximum 20)
    #[prost(int32, tag="351608024")]
    pub version: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImporterInfo {
    #[prost(string, tag="509397331")]
    pub external_item_id: ::prost::alloc::string::String,
    #[prost(int64, tag="351608024")]
    pub version: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OidcClientInfo {
    #[prost(message, repeated, tag="319962465")]
    pub access_permission_assignment: ::prost::alloc::vec::Vec<AccessOrGroupPermissionAssignment>,
    #[prost(string, repeated, tag="438757893")]
    pub audience: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="293476852")]
    pub client_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="41039767")]
    pub grant_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="386556651")]
    pub issuer_url: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="119239199")]
    pub logout_uris: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="440552856")]
    pub public: bool,
    #[prost(string, repeated, tag="39767287")]
    pub redirect_uris: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="440720123")]
    pub response_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="370897762")]
    pub scopes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PasswordPolicyInfo {
    #[prost(int64, tag="87725817")]
    pub password_length: i64,
    #[prost(bool, tag="275313027")]
    pub use_capital_letters: bool,
    #[prost(bool, tag="88440556")]
    pub use_lower_letters: bool,
    #[prost(bool, tag="500532116")]
    pub use_numbers: bool,
    #[prost(bool, tag="53366936")]
    pub use_special_characters: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WindowsServiceAttributes {
    #[prost(string, tag="194995196")]
    pub connection_type: ::prost::alloc::string::String,
    #[prost(string, tag="3446913")]
    pub port: ::prost::alloc::string::String,
    #[prost(bool, tag="147678653")]
    pub use_tls: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WindowsService {
    #[prost(message, optional, tag="405645655")]
    pub attributes: ::core::option::Option<WindowsServiceAttributes>,
    #[prost(string, tag="3208616")]
    pub host: ::prost::alloc::string::String,
    #[prost(string, tag="3373707")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RotatedSecretDetailsInfo {
    #[prost(int32, tag="386273900")]
    pub delete_previous_version_in_days: i32,
    #[prost(bool, tag="112349147")]
    pub grace_rotation: bool,
    #[prost(int64, tag="109299666")]
    pub gw_cluster_id: i64,
    #[prost(string, tag="8402225")]
    pub last_rotation_error: ::prost::alloc::string::String,
    #[prost(int64, tag="489956587")]
    pub max_versions: i64,
    #[prost(int32, tag="225418611")]
    pub number_of_versions_to_save: i32,
    #[prost(int32, tag="254189061")]
    pub rotation_hour: i32,
    #[prost(bool, tag="233650439")]
    pub rotation_interval_min: bool,
    #[prost(string, tag="207252977")]
    pub rotation_statement: ::prost::alloc::string::String,
    #[prost(string, tag="74941991")]
    pub rotator_creds_type: ::prost::alloc::string::String,
    /// RotationStatus defines types of rotation Status
    #[prost(string, tag="265195327")]
    pub rotator_status: ::prost::alloc::string::String,
    #[prost(string, tag="447726454")]
    pub rotator_type: ::prost::alloc::string::String,
    #[prost(bool, tag="57949781")]
    pub same_password: bool,
    #[prost(message, repeated, tag="290559135")]
    pub services_details: ::prost::alloc::vec::Vec<WindowsService>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemSraStatus {
    #[prost(message, optional, tag="465027119")]
    pub count_by_host_info: ::core::option::Option<MapInt64>,
    #[prost(map="string, message", tag="498590243")]
    pub count_info: ::std::collections::HashMap<::prost::alloc::string::String, MapInt64>,
    #[prost(string, repeated, tag="531375521")]
    pub hosts_in_use: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="183462879")]
    pub is_in_use: bool,
    #[prost(string, tag="423223277")]
    pub last_used_item: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TargetNameWithHosts {
    #[prost(string, repeated, tag="99467211")]
    pub hosts: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="474147722")]
    pub target_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecureRemoteAccess {
    #[prost(string, tag="266462100")]
    pub account_id: ::prost::alloc::string::String,
    #[prost(bool, tag="143305861")]
    pub allow_port_forwarding: bool,
    #[prost(bool, tag="410658829")]
    pub allow_providing_external_username: bool,
    #[prost(string, tag="231114111")]
    pub bastion_api: ::prost::alloc::string::String,
    #[prost(string, tag="481242545")]
    pub bastion_issuer: ::prost::alloc::string::String,
    #[prost(int64, tag="440982006")]
    pub bastion_issuer_id: i64,
    #[prost(string, tag="231096721")]
    pub bastion_ssh: ::prost::alloc::string::String,
    #[prost(bool, tag="18804035")]
    pub block_concurrent_connections: bool,
    #[prost(string, tag="498088446")]
    pub block_concurrent_connections_level: ::prost::alloc::string::String,
    #[prost(string, tag="50511102")]
    pub category: ::prost::alloc::string::String,
    #[prost(string, tag="161974973")]
    pub dashboard_url: ::prost::alloc::string::String,
    #[prost(string, tag="379078062")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(string, tag="252455742")]
    pub domain: ::prost::alloc::string::String,
    #[prost(bool, tag="225106559")]
    pub enable: bool,
    #[prost(string, tag="130489752")]
    pub endpoint: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="3208616")]
    pub host: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="327937425")]
    pub host_provider_type: ::prost::alloc::string::String,
    #[prost(bool, tag="106030967")]
    pub is_cli: bool,
    #[prost(bool, tag="106011971")]
    pub is_web: bool,
    #[prost(bool, tag="38909210")]
    pub isolated: bool,
    #[prost(bool, tag="515747818")]
    pub native: bool,
    #[prost(string, tag="479790923")]
    pub rd_gateway_server: ::prost::alloc::string::String,
    #[prost(string, tag="255489302")]
    pub rdp_user: ::prost::alloc::string::String,
    #[prost(string, tag="397924621")]
    pub region: ::prost::alloc::string::String,
    #[prost(bool, tag="184102211")]
    pub rotate_after_disconnect: bool,
    #[prost(string, tag="371116640")]
    pub schema: ::prost::alloc::string::String,
    #[prost(bool, tag="481397006")]
    pub ssh_password: bool,
    #[prost(bool, tag="165857772")]
    pub ssh_private_key: bool,
    #[prost(string, tag="75328419")]
    pub ssh_user: ::prost::alloc::string::String,
    #[prost(message, optional, tag="354650918")]
    pub status_info: ::core::option::Option<ItemSraStatus>,
    #[prost(message, repeated, tag="208182371")]
    pub target_hosts: ::prost::alloc::vec::Vec<TargetNameWithHosts>,
    #[prost(string, repeated, tag="464535296")]
    pub targets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="116079")]
    pub url: ::prost::alloc::string::String,
    #[prost(bool, tag="222003552")]
    pub use_internal_bastion: bool,
    #[prost(bool, tag="263902782")]
    pub web_proxy: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StaticSecretDetailsInfo {
    /// StaticSecretFormat defines the format of static secret (e.g. Text)
    #[prost(string, tag="195037195")]
    pub format: ::prost::alloc::string::String,
    #[prost(int64, tag="489956587")]
    pub max_versions: i64,
    #[prost(bool, tag="264421047")]
    pub notify_on_change_event: bool,
    #[prost(string, tag="265713450")]
    pub username: ::prost::alloc::string::String,
    /// deprecated
    #[prost(string, tag="150593693")]
    pub website: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="163433673")]
    pub websites: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegexpTokenizerInfo {
    /// The Alphabet used for the tokenization
    #[prost(string, tag="309913206")]
    pub alphabet: ::prost::alloc::string::String,
    /// Transformation to perform on the decrypted data
    #[prost(string, tag="493384465")]
    pub decoding_template: ::prost::alloc::string::String,
    /// Transformation to perform on the encrypted data, if the required output template doesn't match the input string The output Should still be valid for the Pattern, otherwise the secret would be able to be decrypted.
    #[prost(string, tag="63758876")]
    pub encoding_template: ::prost::alloc::string::String,
    /// Regexp pattern to extract and deposit the text/encdata
    #[prost(string, tag="254219377")]
    pub pattern: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VaultlessTokenizerInfo {
    #[prost(message, optional, tag="271498281")]
    pub email_tokenizer_info: ::core::option::Option<EmailTokenizerInfo>,
    #[prost(string, tag="500938859")]
    pub key_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag="327987509")]
    pub regexp_tokenizer_info: ::core::option::Option<RegexpTokenizerInfo>,
    #[prost(string, tag="180013089")]
    pub template_type: ::prost::alloc::string::String,
    /// Tweak used in the case of internal tweak type
    #[prost(string, tag="110773740")]
    pub tweak: ::prost::alloc::string::String,
    #[prost(string, tag="3265968")]
    pub tweak_type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenizerInfo {
    #[prost(message, optional, tag="374177590")]
    pub vaultless_tokenizer_info: ::core::option::Option<VaultlessTokenizerInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemGeneralInfo {
    #[prost(message, optional, tag="207496705")]
    pub cert_issue_details: ::core::option::Option<CertificateIssueInfo>,
    #[prost(message, optional, tag="201697517")]
    pub certificate_chain_info: ::core::option::Option<CertificateChainInfo>,
    #[prost(message, optional, tag="62973939")]
    pub certificates_template_info: ::core::option::Option<CertificateTemplateInfo>,
    #[prost(message, optional, tag="247772213")]
    pub classic_key_details: ::core::option::Option<ClassicKeyDetailsInfo>,
    #[prost(string, tag="158508934")]
    pub cluster_gw_url: ::prost::alloc::string::String,
    #[prost(string, tag="221229557")]
    pub display_metadata: ::prost::alloc::string::String,
    #[prost(message, optional, tag="301488196")]
    pub dynamic_secret_producer_details: ::core::option::Option<DynamicSecretProducerInfo>,
    #[prost(message, optional, tag="376238661")]
    pub importer_info: ::core::option::Option<ImporterInfo>,
    #[prost(message, optional, tag="250004164")]
    pub oidc_client_info: ::core::option::Option<OidcClientInfo>,
    #[prost(message, optional, tag="500903084")]
    pub password_policy: ::core::option::Option<PasswordPolicyInfo>,
    #[prost(message, optional, tag="326363063")]
    pub rotated_secret_details: ::core::option::Option<RotatedSecretDetailsInfo>,
    #[prost(message, optional, tag="262183753")]
    pub secure_remote_access_details: ::core::option::Option<SecureRemoteAccess>,
    #[prost(message, optional, tag="208172174")]
    pub static_secret_info: ::core::option::Option<StaticSecretDetailsInfo>,
    #[prost(message, optional, tag="394048300")]
    pub tokenizer_info: ::core::option::Option<TokenizerInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemTargetAssociation {
    #[prost(string, tag="364473979")]
    pub assoc_id: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="405645655")]
    pub attributes: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(int64, tag="278705528")]
    pub target_id: i64,
    #[prost(string, tag="474147722")]
    pub target_name: ::prost::alloc::string::String,
    #[prost(string, tag="473945819")]
    pub target_type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemVersion {
    #[prost(string, tag="495996504")]
    pub access_date: ::prost::alloc::string::String,
    #[prost(string, tag="93370412")]
    pub access_date_display: ::prost::alloc::string::String,
    #[prost(message, optional, tag="461177507")]
    pub certificate_version_info: ::core::option::Option<CertificateVersionInfo>,
    #[prost(string, tag="321236241")]
    pub creation_date: ::prost::alloc::string::String,
    #[prost(string, tag="110711159")]
    pub customer_fragment_id: ::prost::alloc::string::String,
    #[prost(string, tag="519441025")]
    pub deletion_date: ::prost::alloc::string::String,
    /// ItemState defines the different states an Item can be in
    #[prost(string, tag="508677573")]
    pub item_version_state: ::prost::alloc::string::String,
    #[prost(string, tag="202999697")]
    pub modification_date: ::prost::alloc::string::String,
    #[prost(string, tag="80474900")]
    pub protection_key_name: ::prost::alloc::string::String,
    #[prost(int32, tag="351608024")]
    pub version: i32,
    #[prost(bool, tag="40616536")]
    pub with_customer_fragment: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LinkedDetails {
    #[prost(map="string, string", tag="99467211")]
    pub hosts: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RuleAssigner {
    #[prost(string, tag="504426029")]
    pub access_id: ::prost::alloc::string::String,
    #[prost(string, tag="1439672")]
    pub unique_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TargetItemVersion {
    #[prost(string, tag="495996504")]
    pub access_date: ::prost::alloc::string::String,
    #[prost(string, tag="93370412")]
    pub access_date_display: ::prost::alloc::string::String,
    #[prost(message, optional, tag="461177507")]
    pub certificate_version_info: ::core::option::Option<CertificateVersionInfo>,
    #[prost(string, tag="321236241")]
    pub creation_date: ::prost::alloc::string::String,
    #[prost(string, tag="110711159")]
    pub customer_fragment_id: ::prost::alloc::string::String,
    #[prost(string, tag="519441025")]
    pub deletion_date: ::prost::alloc::string::String,
    /// ItemState defines the different states an Item can be in
    #[prost(string, tag="508677573")]
    pub item_version_state: ::prost::alloc::string::String,
    #[prost(bool, tag="292871203")]
    pub latest_version: bool,
    #[prost(string, tag="202999697")]
    pub modification_date: ::prost::alloc::string::String,
    #[prost(string, tag="80474900")]
    pub protection_key_name: ::prost::alloc::string::String,
    #[prost(string, tag="474147722")]
    pub target_name: ::prost::alloc::string::String,
    #[prost(int32, tag="351608024")]
    pub version: i32,
    #[prost(bool, tag="40616536")]
    pub with_customer_fragment: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(string, tag="495996504")]
    pub access_date: ::prost::alloc::string::String,
    #[prost(string, tag="93370412")]
    pub access_date_display: ::prost::alloc::string::String,
    #[prost(string, tag="207523875")]
    pub access_request_status: ::prost::alloc::string::String,
    #[prost(bool, tag="198702615")]
    pub auto_rotate: bool,
    #[prost(message, optional, tag="416847404")]
    pub bastion_details: ::core::option::Option<BastionsList>,
    #[prost(string, tag="485575896")]
    pub cert_issuer_signer_key_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag="485271502")]
    pub certificate_issue_details: ::core::option::Option<CertificateIssueInfo>,
    #[prost(string, tag="394850748")]
    pub certificates: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="61074962")]
    pub client_permissions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="321236241")]
    pub creation_date: ::prost::alloc::string::String,
    #[prost(string, tag="110711159")]
    pub customer_fragment_id: ::prost::alloc::string::String,
    #[prost(bool, tag="517947888")]
    pub delete_protection: bool,
    #[prost(string, tag="519441025")]
    pub deletion_date: ::prost::alloc::string::String,
    #[prost(string, tag="377648713")]
    pub display_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="55944380")]
    pub gateway_details: ::prost::alloc::vec::Vec<GatewayBasicInfo>,
    #[prost(bool, tag="426079384")]
    pub is_access_request_enabled: bool,
    #[prost(bool, tag="109284052")]
    pub is_enabled: bool,
    #[prost(int64, tag="308326691")]
    pub item_accessibility: i64,
    #[prost(message, optional, tag="438293680")]
    pub item_general_info: ::core::option::Option<ItemGeneralInfo>,
    #[prost(int64, tag="505592266")]
    pub item_id: i64,
    #[prost(string, tag="61933861")]
    pub item_metadata: ::prost::alloc::string::String,
    #[prost(string, tag="530731980")]
    pub item_name: ::prost::alloc::string::String,
    #[prost(int64, tag="530574934")]
    pub item_size: i64,
    /// ItemState defines the different states an Item can be in
    #[prost(string, tag="341391262")]
    pub item_state: ::prost::alloc::string::String,
    #[prost(string, tag="80876158")]
    pub item_sub_type: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="530553406")]
    pub item_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="263866773")]
    pub item_targets_assoc: ::prost::alloc::vec::Vec<ItemTargetAssociation>,
    #[prost(string, tag="530530077")]
    pub item_type: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="523240891")]
    pub item_versions: ::prost::alloc::vec::Vec<ItemVersion>,
    #[prost(string, tag="172867049")]
    pub last_rotation_date: ::prost::alloc::string::String,
    #[prost(int32, tag="387866672")]
    pub last_version: i32,
    #[prost(message, optional, tag="61336037")]
    pub linked_details: ::core::option::Option<LinkedDetails>,
    #[prost(string, tag="202999697")]
    pub modification_date: ::prost::alloc::string::String,
    #[prost(string, tag="34451584")]
    pub next_rotation_date: ::prost::alloc::string::String,
    #[prost(string, tag="80474900")]
    pub protection_key_name: ::prost::alloc::string::String,
    #[prost(string, tag="80676803")]
    pub protection_key_type: ::prost::alloc::string::String,
    #[prost(string, tag="342324252")]
    pub public_value: ::prost::alloc::string::String,
    #[prost(int64, tag="273509274")]
    pub rotation_interval: i64,
    #[prost(message, optional, tag="507826577")]
    pub shared_by: ::core::option::Option<RuleAssigner>,
    #[prost(message, repeated, tag="102927994")]
    pub target_versions: ::prost::alloc::vec::Vec<TargetItemVersion>,
    #[prost(bool, tag="40616536")]
    pub with_customer_fragment: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JsonError {
    #[prost(string, tag="96784904")]
    pub error: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListItems {
    /// for personal password manager
    #[prost(string, tag="213139122")]
    pub accessibility: ::prost::alloc::string::String,
    /// Filter by item name/username/website or part of it
    #[prost(string, tag="409156735")]
    pub advanced_filter: ::prost::alloc::string::String,
    /// Retrieve all items using pagination, when disabled retrieving only first 1000 items
    #[prost(string, tag="158511737")]
    pub auto_pagination: ::prost::alloc::string::String,
    /// Filter by item name or part of it
    #[prost(string, tag="200750218")]
    pub filter: ::prost::alloc::string::String,
    /// Set output format to JSON
    #[prost(bool, tag="3271912")]
    pub json: bool,
    /// Show only basic information of the items
    #[prost(bool, tag="19540818")]
    pub minimal_view: bool,
    /// List only secrets modified after specified date (in unix time)
    #[prost(int64, tag="421781033")]
    pub modified_after: i64,
    /// Next page reference
    #[prost(string, tag="483104251")]
    pub pagination_token: ::prost::alloc::string::String,
    /// Path to folder
    #[prost(string, tag="3433509")]
    pub path: ::prost::alloc::string::String,
    /// Filter by items with SRA functionality enabled
    #[prost(bool, tag="522067785")]
    pub sra_only: bool,
    #[prost(string, repeated, tag="41825862")]
    pub sub_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Filter by item tag
    #[prost(string, tag="114586")]
    pub tag: ::prost::alloc::string::String,
    /// Authentication token (see `/auth` and `/configure`)
    #[prost(string, tag="110541305")]
    pub token: ::prost::alloc::string::String,
    /// The item types list of the requested items. In case it is empty, all types of items will be returned. options: \[key, static-secret, dynamic-secret, classic-key\]
    #[prost(string, repeated, tag="3575610")]
    pub r#type: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The universal identity token, Required only for universal_identity authentication
    #[prost(string, tag="468850238")]
    pub uid_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListItemsInPathOutput {
    #[prost(string, repeated, tag="146378300")]
    pub folders: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="100526016")]
    pub items: ::prost::alloc::vec::Vec<Item>,
    #[prost(string, tag="143355997")]
    pub next_page: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSecretVal {
    /// for personal password manager
    #[prost(string, tag="213139122")]
    pub accessibility: ::prost::alloc::string::String,
    /// For Password Management use, additional fields
    #[prost(map="string, string", tag="176478307")]
    pub custom_field: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    /// Secret format \[text/json\] (relevant only for type 'generic')
    #[prost(string, tag="195037195")]
    pub format: ::prost::alloc::string::String,
    /// For Password Management use, reflect the website context
    #[prost(string, repeated, tag="419541814")]
    pub inject_url: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Set output format to JSON
    #[prost(bool, tag="3271912")]
    pub json: bool,
    /// Whether to keep previous version \[true/false\]. If not set, use default according to account settings
    #[prost(string, tag="489924476")]
    pub keep_prev_version: ::prost::alloc::string::String,
    /// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
    #[prost(string, tag="106079")]
    pub key: ::prost::alloc::string::String,
    /// The last version number before the update
    #[prost(int32, tag="316433247")]
    pub last_version: i32,
    /// The provided value is a multiline value (separated by '\\n')
    #[prost(bool, tag="132497237")]
    pub multiline: bool,
    /// Secret name
    #[prost(string, tag="3373707")]
    pub name: ::prost::alloc::string::String,
    /// Deprecated
    #[prost(bool, tag="23590488")]
    pub new_version: bool,
    /// For Password Management use, additional fields
    #[prost(string, tag="143243933")]
    pub password: ::prost::alloc::string::String,
    /// Authentication token (see `/auth` and `/configure`)
    #[prost(string, tag="110541305")]
    pub token: ::prost::alloc::string::String,
    /// The universal identity token, Required only for universal_identity authentication
    #[prost(string, tag="468850238")]
    pub uid_token: ::prost::alloc::string::String,
    /// For Password Management use
    #[prost(string, tag="265713450")]
    pub username: ::prost::alloc::string::String,
    /// The secret value (relevant only for type 'generic')
    #[prost(string, tag="111972721")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSecretValOutput {
    #[prost(string, tag="3373707")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthRequest {
    #[prost(message, optional, tag="1")]
    pub body: ::core::option::Option<Auth>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSecretRequest {
    #[prost(message, optional, tag="1")]
    pub body: ::core::option::Option<CreateSecret>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteItemRequest {
    #[prost(message, optional, tag="1")]
    pub body: ::core::option::Option<DeleteItem>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DescribeItemRequest {
    #[prost(message, optional, tag="1")]
    pub body: ::core::option::Option<DescribeItem>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRotatedSecretValueRequest {
    #[prost(message, optional, tag="1")]
    pub body: ::core::option::Option<GetRotatedSecretValue>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRotatedSecretValueResponse {
    #[prost(message, optional, tag="1")]
    pub data: ::core::option::Option<::prost_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretValueRequest {
    #[prost(message, optional, tag="1")]
    pub body: ::core::option::Option<GetSecretValue>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretValueResponse {
    #[prost(message, optional, tag="1")]
    pub data: ::core::option::Option<::prost_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListItemsRequest {
    #[prost(message, optional, tag="1")]
    pub body: ::core::option::Option<ListItems>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSecretValRequest {
    #[prost(message, optional, tag="1")]
    pub body: ::core::option::Option<UpdateSecretVal>,
}
include!("akeyless_grpc.tonic.rs");
// @@protoc_insertion_point(module)
